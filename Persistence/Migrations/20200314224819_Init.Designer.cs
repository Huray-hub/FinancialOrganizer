// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence;

namespace Persistence.Migrations
{
    [DbContext(typeof(FinancialOrganizerDbContext))]
    [Migration("20200314224819_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Entities.Transaction.AmountModification", b =>
                {
                    b.Property<int>("AmountModificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AmountModificationID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("AmountCalculationType")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Amount Calculation Type")
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<int>("AmountType")
                        .HasColumnName("Amount Type")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("AmountModificationId");

                    b.ToTable("AmountModifications");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.RecurrentTransactionCustomFrequency", b =>
                {
                    b.Property<int>("RecurrentTransactionCustomFrequencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RecurrentTransactionCustomFrequencyID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("TimeUnit")
                        .HasColumnName("Time Unit")
                        .HasColumnType("int");

                    b.Property<int>("TimeUnitQuantity")
                        .HasColumnName("Time Unit Quantity")
                        .HasColumnType("int");

                    b.Property<int>("TransactionRecurrencyId")
                        .HasColumnType("int");

                    b.HasKey("RecurrentTransactionCustomFrequencyId");

                    b.HasIndex("TransactionRecurrencyId")
                        .IsUnique();

                    b.ToTable("RecurrentTransactionCustomFrequencies");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.RecurrentTransactionInstallment", b =>
                {
                    b.Property<int>("RecurrentTransactionInstallmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RecurrentTransactionInstallmentID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CurrentInstallment")
                        .HasColumnName("Current Installment")
                        .HasColumnType("int");

                    b.Property<DateTime>("InstallmentTriggerDate")
                        .HasColumnName("Installment Trigger Date")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("TransactionRecurrencyId")
                        .HasColumnType("int");

                    b.HasKey("RecurrentTransactionInstallmentId");

                    b.HasIndex("TransactionRecurrencyId");

                    b.ToTable("RecurrentTransactionInstallments");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.RecurrentTransactionLimitation", b =>
                {
                    b.Property<int>("RecurrentTransactionLimitationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("RecurrentTransactionLimitationID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate")
                        .HasColumnName("End Date")
                        .HasColumnType("smalldatetime");

                    b.Property<decimal?>("MaxSumAmount")
                        .HasColumnName("Max Sum Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("SumAmount")
                        .HasColumnName("Sum Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SumInstallments")
                        .HasColumnName("Sum Installments")
                        .HasColumnType("int");

                    b.Property<int>("TransactionRecurrencyId")
                        .HasColumnType("int");

                    b.HasKey("RecurrentTransactionLimitationId");

                    b.HasIndex("TransactionRecurrencyId")
                        .IsUnique();

                    b.ToTable("RecurrentTransactionLimitations");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.RecurrentTransactionSumAmountModification", b =>
                {
                    b.Property<int>("RecurrentTransactionLimitationId")
                        .HasColumnName("RecurrentTransactionLimitationID")
                        .HasColumnType("int");

                    b.Property<int>("AmountModificationId")
                        .HasColumnName("AmountModificationID")
                        .HasColumnType("int");

                    b.HasKey("RecurrentTransactionLimitationId", "AmountModificationId");

                    b.HasIndex("AmountModificationId");

                    b.ToTable("RecurrentTransactionSumAmountModifications");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("money");

                    b.Property<int>("CategoryId")
                        .HasColumnName("CategoryID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValue(new DateTime(2020, 3, 15, 0, 48, 18, 837, DateTimeKind.Local).AddTicks(9483));

                    b.Property<string>("CreatedByUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Currency")
                        .HasColumnType("int");

                    b.Property<bool>("IsRecurrent")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateTime?>("LastModifiedAt")
                        .HasColumnType("smalldatetime");

                    b.Property<string>("LastModifiedByUserId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("MaxAmount")
                        .HasColumnName("Max Amount")
                        .HasColumnType("money");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<int>("TransactionAmountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TriggerDate")
                        .HasColumnName("Trigger Date")
                        .HasColumnType("smalldatetime");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TransactionId")
                        .HasAnnotation("SqlServer:Clustered", true);

                    b.HasIndex("CategoryId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.TransactionAmountModification", b =>
                {
                    b.Property<int>("TransactionId")
                        .HasColumnName("TransactionID")
                        .HasColumnType("int");

                    b.Property<int>("AmountModificationId")
                        .HasColumnName("AmountModificationID")
                        .HasColumnType("int");

                    b.HasKey("TransactionId", "AmountModificationId");

                    b.HasIndex("AmountModificationId");

                    b.ToTable("TransactionAmountModifications");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.TransactionCategory", b =>
                {
                    b.Property<int>("TransactionCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionCategoryID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.HasKey("TransactionCategoryId");

                    b.ToTable("TransactionCategories");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.TransactionRecurrency", b =>
                {
                    b.Property<int>("TransactionRecurrencyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("TransactionRecurrencyID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("FrequencyType")
                        .HasColumnName("Frequency Type")
                        .HasColumnType("int");

                    b.Property<bool>("HasLimitations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int>("TransactionId")
                        .HasColumnType("int");

                    b.HasKey("TransactionRecurrencyId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.ToTable("TransactionRecurrencies");
                });

            modelBuilder.Entity("Domain.Entities.Transaction.RecurrentTransactionCustomFrequency", b =>
                {
                    b.HasOne("Domain.Entities.Transaction.TransactionRecurrency", "TransactionRecurrency")
                        .WithOne("RecurrentTransactionCustomFrequency")
                        .HasForeignKey("Domain.Entities.Transaction.RecurrentTransactionCustomFrequency", "TransactionRecurrencyId")
                        .HasConstraintName("FK_RecurrentTransactionCustomFrequency_TransactionRecurrency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Transaction.RecurrentTransactionInstallment", b =>
                {
                    b.HasOne("Domain.Entities.Transaction.TransactionRecurrency", "TransactionRecurrency")
                        .WithMany("RecurrentTransactionInstallments")
                        .HasForeignKey("TransactionRecurrencyId")
                        .HasConstraintName("FK_RecurrentTransactionInstallments_TransactionRecurrency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Transaction.RecurrentTransactionLimitation", b =>
                {
                    b.HasOne("Domain.Entities.Transaction.TransactionRecurrency", "TransactionRecurrency")
                        .WithOne("RecurrentTransactionLimitation")
                        .HasForeignKey("Domain.Entities.Transaction.RecurrentTransactionLimitation", "TransactionRecurrencyId")
                        .HasConstraintName("FK_RecurrentTransactionLimitation_TransactionRecurrency")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Transaction.RecurrentTransactionSumAmountModification", b =>
                {
                    b.HasOne("Domain.Entities.Transaction.AmountModification", "AmountModification")
                        .WithMany("RecurrentTransactionSumAmountModifications")
                        .HasForeignKey("AmountModificationId")
                        .HasConstraintName("FK_RecurrentTransactionSumAmountModifications_AmountModifications")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transaction.RecurrentTransactionLimitation", "RecurrentTransactionLimitation")
                        .WithMany("RecurrentTransactionSumAmountModifications")
                        .HasForeignKey("RecurrentTransactionLimitationId")
                        .HasConstraintName("FK_RecurrentTransactionSumAmountModifications_RecurrentTransactionLimitations")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Transaction.Transaction", b =>
                {
                    b.HasOne("Domain.Entities.Transaction.TransactionCategory", "Category")
                        .WithMany("Transactions")
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_Transactions_Category")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Transaction.TransactionAmountModification", b =>
                {
                    b.HasOne("Domain.Entities.Transaction.AmountModification", "AmountModification")
                        .WithMany("TransactionAmountModifications")
                        .HasForeignKey("AmountModificationId")
                        .HasConstraintName("FK_TransactionAmountModifications_AmountModifications")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Transaction.Transaction", "Transaction")
                        .WithMany("TransactionAmountModifications")
                        .HasForeignKey("TransactionId")
                        .HasConstraintName("FK_TransactionAmountModifications_Transactions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.Transaction.TransactionRecurrency", b =>
                {
                    b.HasOne("Domain.Entities.Transaction.Transaction", "Transaction")
                        .WithOne("TransactionRecurrency")
                        .HasForeignKey("Domain.Entities.Transaction.TransactionRecurrency", "TransactionId")
                        .HasConstraintName("FK_TransactionRecurrency_Transaction")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
